---
import { Icon } from "astro-icon/components";
import { GITHUB_URL, LINKEDIN_URL, SITE_TITLE } from "../consts";
import { Image } from "astro:assets";
import frieren from "../frieren.jpg";
const links = [
  { label: "Linked In", href: LINKEDIN_URL, icon: "mdi:linkedin" },
  { label: "GitHub", href: GITHUB_URL, icon: "mdi:github" },
];
---

<aside
  class="bg-accent fixed top-0 left-0 h-screen rounded-r-md flex flex-col justify-between min-w-64 w-64 py-8 px-6 overflow-y-auto md:sticky md:top-6 md:h-fit md:max-h-screen md:rounded-md"
>
  <div class="flex flex-col items-center text-center space-y-6">
    <div class="relative w-48 h-48">
      <div
        class="absolute inset-0 bg-black/20 translate-x-1 shadow translate-y-1 rounded-md"
      >
      </div>
      <Image
        src={frieren}
        alt="Profile Avatar"
        class="absolute inset-0 w-48 h-48 rounded-md object-cover z-10"
        priority
        loading="eager"
        decoding="sync"
        fetchpriority="high"
      />
    </div>

    <div class="flex gap-2">
      {
        links.map((link) => (
          <a
            aria-label={link.label}
            class="bg-accent-100 text-accent p-2 rounded-lg"
            href={link.href}
          >
            <Icon name={link.icon} class="w-6 h-6" />
          </a>
        ))
      }
    </div>

    <div class="space-y-2">
      <h1 class="!text-2xl font-bold text-foreground tracking-tight">Author</h1>
      <p class="text-muted-foreground text-sm leading-relaxed max-w-48">
        Overpower Static Blog Template built with Astro
      </p>
    </div>
  </div>

  <div class="flex flex-col space-y-4">
    <nav class="flex flex-col space-y-1">
      <a href="/" class="nav-link group">
        <Icon
          name="mdi:home"
          class="w-5 h-5 text-muted-foreground group-hover:text-accent transition-colors"
        />
        <span>Home</span>
      </a>
      <a href="/about" class="nav-link group">
        <Icon
          name="mdi:account"
          class="w-5 h-5 text-muted-foreground group-hover:text-accent transition-colors"
        />
        <span>About</span>
      </a>
    </nav>
    <div class="relative">
      <button
        id="themeButton"
        class="w-full flex items-center justify-between px-4 py-3 rounded-lg bg-card border border-border hover:bg-muted/50 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-accent/50"
        aria-label="Theme Settings"
      >
        <div class="flex items-center gap-3">
          <Icon name="mdi:palette" class="w-5 h-5 text-muted-foreground" />
          <span class="text-sm font-medium">Theme</span>
        </div>
        <Icon
          id="chevronIcon"
          name="mdi:chevron-right"
          class="w-4 h-4 text-muted-foreground transition-transform duration-200"
        />
      </button>

      <div
        id="themePopover"
        class="absolute bottom-full left-0 right-0 mb-2 p-4 bg-card border border-border rounded-lg shadow-lg opacity-0 scale-95 pointer-events-none transition-all duration-200 space-y-4"
      >
        <div class="flex items-center justify-between">
          <span class="text-sm font-medium">Mode</span>
          <button
            id="themeToggle"
            class="flex items-center gap-2 px-3 py-2 rounded-md bg-muted hover:bg-muted/80 transition-colors"
            aria-label="Toggle theme"
          >
            <Icon
              id="sunIcon"
              name="mdi:white-balance-sunny"
              class="w-4 h-4 hidden dark:block"
            />
            <Icon
              id="moonIcon"
              name="mdi:moon-waning-crescent"
              class="w-4 h-4 block dark:hidden"
            />
            <span id="themeText" class="text-sm">Dark</span>
          </button>
        </div>

        <div class="space-y-2">
          <label class="text-sm font-md" for="colorPicker">Accent Color</label>
          <input
            type="range"
            id="colorPicker"
            min="0"
            max="360"
            value="220"
            class="w-full h-2 rounded-lg appearance-none cursor-pointer"
            style="background: linear-gradient(to right, 
              hsl(0, 100%, 50%), hsl(60, 100%, 50%), hsl(120, 100%, 50%), 
              hsl(180, 100%, 50%), hsl(240, 100%, 50%), hsl(300, 100%, 50%), 
              hsl(360, 100%, 50%));"
          />
        </div>
      </div>
    </div>
  </div>
</aside>

<script>
  const themeButton = document.getElementById(
    "themeButton",
  ) as HTMLButtonElement;
  const themePopover = document.getElementById("themePopover") as HTMLElement;
  const chevronIcon = document.getElementById("chevronIcon") as HTMLElement;
  let isPopoverOpen = false;

  themeButton?.addEventListener("click", () => {
    isPopoverOpen = !isPopoverOpen;

    if (isPopoverOpen) {
      themePopover.classList.remove(
        "opacity-0",
        "scale-95",
        "pointer-events-none",
      );
      themePopover.classList.add("opacity-100", "scale-100");
      chevronIcon.style.transform = "rotate(90deg)";
    } else {
      themePopover.classList.add(
        "opacity-0",
        "scale-95",
        "pointer-events-none",
      );
      themePopover.classList.remove("opacity-100", "scale-100");
      chevronIcon.style.transform = "rotate(0deg)";
    }
  });

  document.addEventListener("click", (e) => {
    if (
      !themeButton?.contains(e.target as Node) &&
      !themePopover?.contains(e.target as Node)
    ) {
      if (isPopoverOpen) {
        isPopoverOpen = false;
        themePopover.classList.add(
          "opacity-0",
          "scale-95",
          "pointer-events-none",
        );
        themePopover.classList.remove("opacity-100", "scale-100");
        chevronIcon.style.transform = "rotate(0deg)";
      }
    }
  });

  const themeToggle = document.getElementById(
    "themeToggle",
  ) as HTMLButtonElement;
  const themeText = document.getElementById("themeText") as HTMLSpanElement;
  const sunIcon = document.getElementById("sunIcon") as HTMLElement;
  const moonIcon = document.getElementById("moonIcon") as HTMLElement;

  const isDarkInitial = document.documentElement.classList.contains("dark");
  updateThemeUI(isDarkInitial);

  themeToggle?.addEventListener("click", () => {
    const isDark = document.documentElement.classList.contains("dark");

    if (isDark) {
      document.documentElement.classList.remove("dark");
      localStorage.setItem("theme", "light");
      updateThemeUI(false);
    } else {
      document.documentElement.classList.add("dark");
      localStorage.setItem("theme", "dark");
      updateThemeUI(true);
    }

    const currentHue = localStorage.getItem("accent-hue") || "220";
    updateColors(currentHue);
  });

  function updateThemeUI(isDark: boolean) {
    if (themeText && sunIcon && moonIcon) {
      if (isDark) {
        themeText.textContent = "Light";
        sunIcon.classList.remove("hidden");
        sunIcon.classList.add("block");
        moonIcon.classList.remove("block");
        moonIcon.classList.add("hidden");
      } else {
        themeText.textContent = "Dark";
        sunIcon.classList.remove("block");
        sunIcon.classList.add("hidden");
        moonIcon.classList.remove("hidden");
        moonIcon.classList.add("block");
      }
    }
  }

  const colorPicker = document.getElementById(
    "colorPicker",
  ) as HTMLInputElement;

  if (colorPicker) {
    const savedHue = localStorage.getItem("accent-hue") || "220";
    colorPicker.value = savedHue;
    updateColors(savedHue);

    colorPicker.addEventListener("input", function () {
      const hue = this.value;
      updateColors(hue);
      localStorage.setItem("accent-hue", hue);
    });
  }

  function updateColors(hue: string) {
    document.documentElement.style.setProperty("--accent-hue", hue);

    const variations = [
      { name: "--accent-50", lightness: "97%" },
      { name: "--accent-100", lightness: "95%" },
      { name: "--accent-200", lightness: "90%" },
      { name: "--accent-300", lightness: "82%" },
      { name: "--accent-400", lightness: "70%" },
      { name: "--accent-500", lightness: "60%" },
      { name: "--accent-600", lightness: "50%" },
      { name: "--accent-700", lightness: "40%" },
      { name: "--accent-800", lightness: "30%" },
      { name: "--accent-900", lightness: "20%" },
      { name: "--accent-950", lightness: "10%" },
    ];

    variations.forEach((variation) => {
      document.documentElement.style.setProperty(
        variation.name,
        `${hue} 100% ${variation.lightness}`,
      );
    });

    const isDark = document.documentElement.classList.contains("dark");
    const primaryLightness = isDark ? "60%" : "50%";
    const primarySaturation = isDark ? "80%" : "100%";

    document.documentElement.style.setProperty(
      "--primary",
      `${hue} ${primarySaturation} ${primaryLightness}`,
    );

    const bgAccentLightness = isDark ? "8%" : "98%";
    const bgAccentSaturation = isDark ? "25%" : "15%";

    document.documentElement.style.setProperty(
      "--background-accent",
      `${hue} ${bgAccentSaturation} ${bgAccentLightness}`,
    );
  }
</script>

<style>
  #themeButton:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .dark #themeButton:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.25);
  }

  #themePopover {
    backdrop-filter: blur(8px);
    -webkit-backdrop-filter: blur(8px);
  }

  #themeToggle {
    transition: all 0.2s ease;
  }

  #themeToggle:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  .dark #themeToggle:hover {
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
  }

  #sunIcon,
  #moonIcon {
    transition:
      opacity 0.2s ease,
      transform 0.2s ease;
  }

  #colorPicker {
    outline: none;
  }

  #colorPicker::-webkit-slider-thumb {
    appearance: none;
    width: 20px;
    height: 20px;
    background: white;
    border: 3px solid rgb(var(--foreground));
    border-radius: 50%;
    cursor: pointer;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    transition: all 0.2s ease;
  }

  #colorPicker::-webkit-slider-thumb:hover {
    transform: scale(1.1);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }

  #colorPicker::-moz-range-thumb {
    width: 20px;
    height: 20px;
    background: white;
    border: 3px solid rgb(var(--foreground));
    border-radius: 50%;
    cursor: pointer;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    transition: all 0.2s ease;
  }

  #colorPicker::-moz-range-thumb:hover {
    transform: scale(1.1);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }

  #chevronIcon {
    transition: transform 0.2s ease;
  }
</style>
