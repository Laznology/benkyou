---
import { Icon } from "astro-icon/components";
---

<div class="relative group">
  <input type="checkbox" id="themeToggle" class="peer sr-only" />
  
  <label
    for="themeToggle"
    class="w-full flex items-center justify-between px-4 py-3 rounded-lg bg-card border border-border hover:bg-muted/50 transition-all duration-200 cursor-pointer focus-within:ring-2 focus-within:ring-accent/50"
  >
    <div class="flex items-center gap-3">
      <Icon name="mdi:palette" class="w-5 h-5 text-muted-foreground" />
      <span class="text-sm font-medium">Theme</span>
    </div>
    <Icon
      name="mdi:chevron-right"
      class="w-4 h-4 text-muted-foreground transition-transform duration-200 peer-checked:rotate-90"
    />
  </label>

  <div class="absolute bottom-full left-0 right-0 mb-2 p-4 bg-card border border-border rounded-lg shadow-lg backdrop-blur-sm opacity-0 scale-95 pointer-events-none transition-all duration-200 space-y-4 peer-checked:opacity-100 peer-checked:scale-100 peer-checked:pointer-events-auto">
    <div class="flex items-center justify-between">
      <span class="text-sm font-medium">Mode</span>
      <button
        id="darkModeToggle"
        class="flex items-center gap-2 px-3 py-2 rounded-md bg-muted hover:bg-muted/80 transition-colors"
        aria-label="Toggle dark mode"
      >
        <Icon
          name="mdi:white-balance-sunny"
          class="w-4 h-4 hidden dark:block"
        />
        <Icon
          name="mdi:moon-waning-crescent"
          class="w-4 h-4 block dark:hidden"
        />
        <span class="text-sm dark:hidden">Dark</span>
        <span class="text-sm hidden dark:block">Light</span>
      </button>
    </div>

    <div class="space-y-2">
      <label class="text-sm font-medium" for="accentColorPicker">Accent Color</label>
      <input
        type="range"
        id="accentColorPicker"
        min="0"
        max="360"
        value="220"
        class="w-full h-2 rounded-lg appearance-none cursor-pointer accent-slider"
      />
    </div>
  </div>
</div>

<script>
  function initTheme() {
    const darkModeToggle = document.getElementById("darkModeToggle");
    const accentColorPicker = document.getElementById("accentColorPicker");

    function updateColors(hue: string) {
      document.documentElement.style.setProperty("--accent-hue", hue);

      const variations = [
        { name: "--accent-50", lightness: "97%" },
        { name: "--accent-100", lightness: "95%" },
        { name: "--accent-200", lightness: "90%" },
        { name: "--accent-300", lightness: "82%" },
        { name: "--accent-400", lightness: "70%" },
        { name: "--accent-500", lightness: "60%" },
        { name: "--accent-600", lightness: "50%" },
        { name: "--accent-700", lightness: "40%" },
        { name: "--accent-800", lightness: "30%" },
        { name: "--accent-900", lightness: "20%" },
        { name: "--accent-950", lightness: "10%" },
      ];

      variations.forEach((variation) => {
        document.documentElement.style.setProperty(
          variation.name,
          hue + " 100% " + variation.lightness,
        );
      });

      const isDark = document.documentElement.classList.contains("dark");
      const primaryLightness = isDark ? "60%" : "50%";
      const primarySaturation = isDark ? "80%" : "100%";

      document.documentElement.style.setProperty(
        "--primary",
        hue + " " + primarySaturation + " " + primaryLightness,
      );

      const bgAccentLightness = isDark ? "8%" : "98%";
      const bgAccentSaturation = isDark ? "25%" : "15%";

      document.documentElement.style.setProperty(
        "--background-accent",
        hue + " " + bgAccentSaturation + " " + bgAccentLightness,
      );
    }

    function toggleTheme() {
      const isDark = document.documentElement.classList.contains("dark");

      // Remove both classes first to prevent conflicts
      document.documentElement.classList.remove("dark", "light");

      if (isDark) {
        document.documentElement.classList.add("light");
        localStorage.setItem("theme", "light");
      } else {
        document.documentElement.classList.add("dark");
        localStorage.setItem("theme", "dark");
      }

      const currentHue = localStorage.getItem("accent-hue") || "220";
      updateColors(currentHue);
    }

    if (darkModeToggle) {
      darkModeToggle.addEventListener("click", toggleTheme);
    }

    if (accentColorPicker && accentColorPicker instanceof HTMLInputElement) {
      const savedHue = localStorage.getItem("accent-hue") || "220";
      accentColorPicker.value = savedHue;
      updateColors(savedHue);

      accentColorPicker.addEventListener("input", function () {
        if (this instanceof HTMLInputElement) {
          const hue = this.value;
          updateColors(hue);
          localStorage.setItem("accent-hue", hue);
        }
      });
    }
  }

  // Initialize immediately
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initTheme);
  } else {
    initTheme();
  }

  // Handle Astro view transitions
  document.addEventListener("astro:page-load", initTheme);
</script>

<style>
  .accent-slider {
    outline: none;
    background: linear-gradient(to right, 
      hsl(0, 100%, 50%), hsl(60, 100%, 50%), hsl(120, 100%, 50%), 
      hsl(180, 100%, 50%), hsl(240, 100%, 50%), hsl(300, 100%, 50%), 
      hsl(360, 100%, 50%));
  }

  .accent-slider::-webkit-slider-thumb {
    appearance: none;
    width: 20px;
    height: 20px;
    background: white;
    border: 3px solid rgb(var(--foreground));
    border-radius: 50%;
    cursor: pointer;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    transition: all 0.2s ease;
  }

  .accent-slider::-webkit-slider-thumb:hover {
    transform: scale(1.1);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }

  .accent-slider::-moz-range-thumb {
    width: 20px;
    height: 20px;
    background: white;
    border: 3px solid rgb(var(--foreground));
    border-radius: 50%;
    cursor: pointer;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    transition: all 0.2s ease;
    border: none;
  }

  .accent-slider::-moz-range-thumb:hover {
    transform: scale(1.1);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }

  .accent-slider::-moz-range-track {
    background: linear-gradient(to right, 
      hsl(0, 100%, 50%), hsl(60, 100%, 50%), hsl(120, 100%, 50%), 
      hsl(180, 100%, 50%), hsl(240, 100%, 50%), hsl(300, 100%, 50%), 
      hsl(360, 100%, 50%));
    height: 8px;
    border-radius: 4px;
  }
</style>