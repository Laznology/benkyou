---
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import "../styles/global.css";
import type { ImageMetadata } from "astro";
import FallbackImage from "../assets/blog-placeholder-1.jpg";
import frierenImage from "../frieren.jpg";
import { SITE_TITLE } from "../consts";

interface Props {
  title: string;
  description: string;
  image?: ImageMetadata;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = FallbackImage } = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="sitemap" href="/sitemap-index.xml" />
<link
  rel="alternate"
  type="application/rss+xml"
  title={SITE_TITLE}
  href={new URL("rss.xml", Astro.site)}
/>
<meta name="generator" content={Astro.generator} />

<!-- Font preloads -->
<link
  rel="preload"
  href="/fonts/atkinson-regular.woff"
  as="font"
  type="font/woff"
  crossorigin
/>
<link
  rel="preload"
  href="/fonts/atkinson-bold.woff"
  as="font"
  type="font/woff"
  crossorigin
/>

<link rel="preload" href={frierenImage.src} as="image" type="image/jpeg" />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image.src, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image.src, Astro.url)} />

<script is:inline>
  (function () {
    const savedTheme = localStorage.getItem("theme");
    const prefersDark =
      window.matchMedia &&
      window.matchMedia("(prefers-color-scheme: dark)").matches;

    if (savedTheme === "dark" || (!savedTheme && prefersDark)) {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }

    const savedHue = localStorage.getItem("accent-hue") || "220";
    document.documentElement.style.setProperty("--accent-hue", savedHue);

    const variations = [
      { name: "--accent-50", lightness: "97%" },
      { name: "--accent-100", lightness: "95%" },
      { name: "--accent-200", lightness: "90%" },
      { name: "--accent-300", lightness: "82%" },
      { name: "--accent-400", lightness: "70%" },
      { name: "--accent-500", lightness: "60%" },
      { name: "--accent-600", lightness: "50%" },
      { name: "--accent-700", lightness: "40%" },
      { name: "--accent-800", lightness: "30%" },
      { name: "--accent-900", lightness: "20%" },
      { name: "--accent-950", lightness: "10%" },
    ];

    variations.forEach((variation) => {
      document.documentElement.style.setProperty(
        variation.name,
        `${savedHue} 100% ${variation.lightness}`,
      );
    });

    const isDark = document.documentElement.classList.contains("dark");
    const primaryLightness = isDark ? "60%" : "50%";
    const primarySaturation = isDark ? "80%" : "100%";

    document.documentElement.style.setProperty(
      "--primary",
      `${savedHue} ${primarySaturation} ${primaryLightness}`,
    );

    const bgAccentLightness = isDark ? "8%" : "98%";
    const bgAccentSaturation = isDark ? "25%" : "15%";

    document.documentElement.style.setProperty(
      "--background-accent",
      `${savedHue} ${bgAccentSaturation} ${bgAccentLightness}`,
    );
  })();
</script>
