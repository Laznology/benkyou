---
import { type CollectionEntry, getCollection, render } from "astro:content";
import BlogPost from "../../layouts/BlogPost.astro";
import readingTime from "reading-time";

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  const sortedPosts = posts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
  
  return sortedPosts.map((post, index) => {
    const stats = readingTime(post.body!);
    const prevPost = index > 0 ? sortedPosts[index - 1] : null;
    const nextPost = index < sortedPosts.length - 1 ? sortedPosts[index + 1] : null;
    
    return {
      params: { slug: post.id },
      props: { 
        ...post, 
        readingTime: stats, 
        wordCount: stats.words,
        prevPost: prevPost ? { id: prevPost.id, title: prevPost.data.title } : null,
        nextPost: nextPost ? { id: nextPost.id, title: nextPost.data.title } : null,
      },
    };
  });
}

type Props = CollectionEntry<"blog"> & {
  readingTime: any;
  wordCount: number;
  prevPost?: { id: string; title: string } | null;
  nextPost?: { id: string; title: string } | null;
};

const post = Astro.props;
const { Content, headings } = await render(post);
---

<BlogPost
  {...post.data}
  slug={post.id}
  readingTime={post.readingTime}
  wordCount={post.wordCount}
  tags={post.data.tags}
  headings={headings}
  prevPost={post.prevPost}
  nextPost={post.nextPost}
>
  <article class="prose dark:prose-invert w-full">
    <Content />
  </article>
</BlogPost>
